@page "/chat"

@using Azure.CognitiveService.Client
@using Azure.CognitiveService.Client.BlazorApp.Data;
@using Azure.CognitiveService.Client.BlazorApp.Pages.Chat.Components
@using Azure.CognitiveServices.Client.OpenAI.Models.Requests;
@using Azure.CognitiveServices.Client.OpenAI.Models.Responses.Common;
@using Azure.CognitiveServices.Client.OpenAI.ExtensionMethods;
@using Microsoft.Extensions.Options;
@inject IChatCompletionService ChatCompletionSerice
@inject IOptionsSnapshot<AzureOpenAIConfig> OpenAIConfig;
@inject IJSRuntime JS

<div class="chat-container">

        <ConversationContext SearchModel="@SelectedSearchModel" IsVisible="@SidePanelVisible" SearchModels="SearchModelExamples" SelectedSearchModelChanged="handleChange">
        </ConversationContext>
   

    <div class="chat">
        <CollapseButton OnClicked="OnHideSidePanelClicked" IsOpen="@SidePanelVisible"></CollapseButton>
        
        <Conversation Results="@ConversationHistory"></Conversation>

        <div class="input-area">
            <ErrorIndicator ErrorText="@ErrorText"></ErrorIndicator>
            <LoadingIndicator StatusText="@StatusText"></LoadingIndicator>

            <ChatInput SearchModel="@SelectedSearchModel"
                OnGenerateTextCompletionSubmitted="@OnTextCompletionSubmitted"
                OnGenerateImageClicked="OnGenerateImageClicked"
                OnRecordClickedClicked="OnRecordClicked"
                IsBusy="@IsBusy"
                IsRecording="@IsRecording">
            </ChatInput>

        </div>
    </div>
</div>

@code {
    private AzureOpenAIConfig config => OpenAIConfig.Get("chat");
    private bool SidePanelVisible = false;
    private string? ErrorText = "";
    private string StatusText = "";
    private bool IsBusy = false;
    bool IsRecording = false;
    private List<ChatInfo> ConversationHistory = new List<ChatInfo>();
    private ChatSearchModel SelectedSearchModel { get; set; }
    private List<ChatSearchModel> SearchModelExamples = new List<ChatSearchModel>
    {
        new ChatSearchModel()
        {
            Name = "Code Generator",
            MaxTokens = 2048,
            NoOfResults = 1,
            SearchText = "write me a simple class that adds 2 numbers together and write a unit test using xunit , an API Controller and then a HttpClient To call the API",
            System = "You are a code generator, when generating code markdown ensure to include the language e.g c# should start with ```csharp. dont give any explanations or description code only",
            Assistant = ""
        },
        new ChatSearchModel()
        {
            Name = "Json Response Personal Details",
            MaxTokens = 2048,
            NoOfResults = 1,
            SearchText = "extract the person details from this  Paul Newman 1985 london uk",
            System = "respond only with json",
            Assistant = ""
        },
        new ChatSearchModel()
        {
            Name = "Json Response Quiz",
            MaxTokens = 2048,
            NoOfResults = 1,
            SearchText = "Generate 10 general knowledge multiple choice questions on music,geagraphy and movies, include the correct answer in a feild called answer",
            System = "respond only with json",
            Assistant = ""
        },
        new ChatSearchModel()
        {
            Name = "Support Assistant",
            MaxTokens = 2048,
            NoOfResults = 1,
            SearchText = "How do I fix my issue?",
            System = "You are a helpfull support agent",
            Assistant = "Ticket : 1024, Title : Unable to send emails, Content : Unable to connect to SMTP server"
        },
        new ChatSearchModel()
        {
            Name = "Natural Language to Sql",
            MaxTokens = 2048,
            NoOfResults = 1,
            SearchText = "how many customers ordered apples in the last month from china and what was the total cost?",
            System = "You are a natural langure to SQL generator",
            Assistant = @"
                        Table : [dbo].[Products] PROD
                        Columns : ProductID , ProductName , SupplierID , CategoryID , QuantityPerUnit , UnitPrice , UnitsInStock , UnitsOnOrder , ReorderLevel , Discontinued

                        Table : [dbo].[Customers] CUST
                        Columns :  CustomerID , CompanyName , ContactName , ContactTitle , Address , City , Region , PostalCode , Country , Phone , Fax

                        Table : [dbo].[Order Details] ORD
                        Columns :  OrderID , ProductID , UnitPrice , Quantity , Discount

                        Table : [dbo].[Orders] O
                        Columns : OrderID , CustomerID , EmployeeID , OrderDate , RequiredDate , ShippedDate , ShipVia , Freight , ShipName , ShipAddress , ShipCity , ShipRegion , ShipPostalCode , ShipCountry
                        "
        }
    };

    void handleChange(ChatSearchModel value)
    {
        SelectedSearchModel = value;
    }

    protected override Task OnInitializedAsync()
    {
        SelectedSearchModel = SearchModelExamples.First();
        return base.OnInitializedAsync();
    }

    private ChatSearchModel JsonOnly = new()
    {
        MaxTokens = 2048,
        NoOfResults = 1,
        SearchText = "extract the person details from this  Paul Newman 1985 london uk",
        System = "respond only with json",
        Assistant = ""
    };


    private async Task OnHideSidePanelClicked()
    {
        this.SidePanelVisible = !this.SidePanelVisible;
    }

    private async Task OnTextCompletionSubmitted()
    {
        await SendTextCompletionRequest(SelectedSearchModel.SearchText);
    }

    private async Task OnGenerateImageClicked()
    {
        //setIsProcessing(true, "Generating Image");

        //var imageResponse = await OpenAIService.Images.Generate(SearchModel.SearchText, 1);
        //if (imageResponse.IsSuccess)
        //{
        //    this.ConversationHistory.Add(new ChatInfo()
        //        {
        //            User = "AI",
        //            Message = $@"<img src=""{imageResponse?.Result?.Data[0].Url}"" alt=""drawing"" width=""400"" />"
        //        });
        //}
        //else
        //{
        //    this.ErrorText = imageResponse.ErrorResponse?.Error?.Message;
        //}
        //this.setIsProcessing(false);
    }

    private async Task OnRecordClicked()
    {
        //this.setIsRecording(true);

        //var audioWindows1252EncodedData = await JS.InvokeAsync<string>("ChatGPTMethods.startRecording", "stop", "audio-control");

        //this.setIsRecording(false);

        //if (string.IsNullOrEmpty(audioWindows1252EncodedData) == false)
        //{
        //    var audioData = this.ConvertAudioData(audioWindows1252EncodedData);
        //    await this.Transcribe(audioData);
        //}
    }

    private async Task SendTextCompletionRequest(string text)
    {
        SelectedSearchModel.SearchText = string.Empty;

        this.setIsProcessing(true);
        this.ConversationHistory.Add(new ChatInfo() { User = "TimDoesTech", Message = text });


        var messagesRequest = new List<Message>()
            {
                Message.Create(ChatRoleType.System,SelectedSearchModel.System),
                Message.Create(ChatRoleType.Assistant, SelectedSearchModel.Assistant)
            };

        messagesRequest.Add(Message.Create(ChatRoleType.User, text));

        this.ConversationHistory.Add(new ChatInfo() { User = "AI", Message = string.Empty });

        try
        {
            await foreach (var result in ChatCompletionSerice.CreateStream(messagesRequest,"", config, o =>
            {
                o.N = SelectedSearchModel.NoOfResults;
                o.MaxTokens = SelectedSearchModel.MaxTokens;
            }))
            {
                this.ConversationHistory[ConversationHistory.Count - 1].Message += result.Value!.Choices[0].Delta.Content;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            ErrorText = $"An error occured : {ex.Message}";
        }

        SelectedSearchModel.Assistant += $"\r\n{this.ConversationHistory[ConversationHistory.Count - 1].Message}";

        this.setIsProcessing(false);
    }

    void OnAudioTextUpdated(string text)
    {
        this.SelectedSearchModel.SearchText = text;
    }

    //private byte[] ConvertAudioData(string windows1252EncodedData)
    //{
    //    Encoding.RegisterProvider(CodePagesEncodingProvider.Instance);
    //    var enc1252 = Encoding.GetEncoding(1252);
    //    return enc1252.GetBytes(windows1252EncodedData);
    //}

    //private async Task Transcribe(byte[] audioData)
    //{
    //    this.setIsProcessing(true, "Transcribing Text");
    //    var fileContentInfo = new FileContentInfo(audioData, "transcription.wav");
    //    var request = new CreateTranscriptionRequest(fileContentInfo);
    //    var result = await OpenAIService.Audio.GetTranscription(request);
    //    if (result.IsSuccess)
    //    {
    //        var transcriptionText = result.Result!.Text;
    //        this.OnAudioTextUpdated(transcriptionText);
    //        this.setIsProcessing(false);
    //    }
    //    else
    //    {
    //        this.ErrorText = result.ErrorResponse?.Error?.Message;
    //    }
    //}

    //private async Task Translate(byte[] audioData)
    //{
    //    setIsProcessing(true, "Translating Text");
    //    var fileContentInfo = new FileContentInfo(audioData, "translation.wav");
    //    var request = new CreateTranslationRequest(fileContentInfo);
    //    var result = await OpenAIService.Audio.GetTranslation(request);
    //    if (result.IsSuccess)
    //    {
    //        var transcriptionText = result.Result!.Text;
    //        this.OnAudioTextUpdated(transcriptionText);
    //        this.setIsProcessing(false);

    //    }
    //    else
    //    {
    //        this.ErrorText = result.ErrorResponse?.Error?.Message;
    //    }
    //}



    private void setIsRecording(bool value)
    {
        this.IsRecording = value;
        this.StateHasChanged();
    }

    private void setIsProcessing(bool value, string statusMessage = "Generating")
    {
        this.StatusText = value ? statusMessage : "";
        this.IsBusy = value;
        this.StateHasChanged();
    }
}
