@typeparam TItem

<div class="form-control-wrapper">

    <select class="form-select" @onchange="ChangeHandler">
        
        @foreach (var (id, item) in idDictionary)
        {
            <option value="@id">@Selector(item).ToString()</option>
        }
    </select>
</div>

@code {
    [Parameter] public IList<TItem> Items { get; set; }
    [Parameter] public Func<TItem, object> Selector { get; set; }
    [Parameter] public EventCallback<TItem> ValueChanged { get; set; }

    private Dictionary<Guid, TItem> idDictionary;

    protected override void OnInitialized()
    {
        if (idDictionary == null)
        {
            idDictionary = new Dictionary<Guid, TItem>();
            Items.ToList().ForEach(x => idDictionary.Add(Guid.NewGuid(), x));
        }
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
       
        return base.OnAfterRenderAsync(firstRender);
    }

    private async Task ChangeHandler(ChangeEventArgs args)
    {
        if (idDictionary.TryGetValue(Guid.Parse(args.Value.ToString()), out var selectedItem))
        {
            await ValueChanged.InvokeAsync(selectedItem);
        }
    }
}
